#
# See https://github.com/kubernetes/charts/tree/master/stable/prometheus/templates
#
apiVersion: v1
kind: ConfigMap
metadata:
  name: prometheus-config
  namespace: {{ .Values.namespace }}
  labels:
    app: prometheus
data:
  prometheus.yml: |
    global:
      ## How frequently to scrape targets by default
      ##
      scrape_interval: {{ .Values.prometheus.scrapeInterval }}
      ## How long until a scrape request times out
      ##
      scrape_timeout: 10s
      ## How frequently to evaluate rules
      ##
      evaluation_interval: {{ .Values.prometheus.evaluationInterval }}

    rule_files:
      - "/etc/config/*.rules"

    {{- if .Values.prometheus.remoteWriteURL }}
    # set up a remote write endpoint to which all scraped targets will be
    # written for long-term storage.
    # see: https://prometheus.io/docs/prometheus/latest/storage
    remote_write:
      - url: {{ .Values.prometheus.remoteWriteURL }}
    {{- end }}

    scrape_configs:
      # scrape configuration for prometheus itself.
      - job_name: prometheus
        static_configs:
          - targets:
            - localhost:9090

      # scrape configuration for node-exporter (daemonset running on each
      # node on host network port 9100)
      - job_name: node-exporter
        kubernetes_sd_configs:
        - role: node
        scheme: http
        # rewrite label set before scraping (allowing us to use prometheus
        # kubernetes node role, which picks up kubelet http endpoints, to
        # have it replaced with the node-exporter port (9100) before we scrape).
        relabel_configs:
        # save all labels picked up from the node as metric labels
        - action: labelmap
          regex: __meta_kubernetes_node_label_(.+)
        # set the address of the scrape target to that of node-exporter (9100)
        # (the prometheus kubernetes node role discovers all cluster kubelet
        # http ports)
        - action: replace
          source_labels: [__address__]
          regex: '(.*):10250'
          replacement: '${1}:9100'
          target_label: __address__
        # use node hostname as vale of scrape target instance
        - action: replace
          source_labels: [__meta_kubernetes_node_label_kubernetes_io_hostname]
          target_label: __instance__
        # set "name" value to "job"
        - action: replace
          source_labels: [job]
          regex: 'kubernetes-(.*)'
          replacement: '${1}'
          target_label: name


      # scrape configuration for kube-state-metrics.
      - job_name: kube-state-metrics
        kubernetes_sd_configs:
        - role: endpoints
        scheme: http
        # filter out endpoints such that we only keep the http endpoint for the kube-state-metrics endpoint(s).
        relabel_configs:
          - action: keep
            source_labels: [__meta_kubernetes_namespace, __meta_kubernetes_service_name, __meta_kubernetes_endpoint_port_name]
            regex: {{ .Values.namespace }};kube-state-metrics;http


      # scrape config for kubelet /metrics.
      - job_name: kubelets
        kubernetes_sd_configs:
        - role: node
        scheme: https
        tls_config:
          ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
        bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token
        # rewrite label set before scraping, allowing us to use set the
        # scrape destination to a given kubelet, whose /metrics endpoint we
        # query via the apiserver.
        relabel_configs:
          # save all labels picked up from the node as metric labels
          - action: labelmap
            regex: __meta_kubernetes_node_label_(.+)
          # set the scrape address to apiserver
          - action: replace
            target_label: __address__
            replacement: kubernetes.default.svc:443
          # set scrape path to that of a particular node's kubelet /metrics
          - action: replace
            source_labels: [__meta_kubernetes_node_name]
            regex: (.+)
            target_label: __metrics_path__
            replacement: /api/v1/nodes/${1}/proxy/metrics


      # scrape config for kubelet /metrics/cadvisor.
      - job_name: kubelets-cadvisor
        kubernetes_sd_configs:
        - role: node
        scheme: https
        tls_config:
          ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
        bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token
        # rewrite label set before scraping, allowing us to use set the
        # scrape destination to a given kubelet, whose /metrics endpoint we
        # query via the apiserver.
        relabel_configs:
          # save all labels picked up from the node as metric labels
          - action: labelmap
            regex: __meta_kubernetes_node_label_(.+)
          # set the scrape address to apiserver
          - action: replace
            target_label: __address__
            replacement: kubernetes.default.svc:443
          # set scrape path to that of a particular node's kubelet /metrics
          - action: replace
            source_labels: [__meta_kubernetes_node_name]
            regex: (.+)
            target_label: __metrics_path__
            replacement: /api/v1/nodes/${1}/proxy/metrics/cadvisor


      # Scrape config for API servers.
      # Kubernetes exposes API servers as endpoints to the default/kubernetes
      # service so this uses `endpoints` role and uses relabelling to only keep
      # the endpoints associated with the default/kubernetes service using the
      # default named port `https`. This works for single API server deployments as
      # well as HA API server deployments.
      - job_name: apiservers
        kubernetes_sd_configs:
        - role: endpoints
        scheme: https
        tls_config:
          ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
        bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token
        # Keep only the default/kubernetes service endpoints for the https port. This
        # will add targets for each API server which Kubernetes adds an endpoint to
        # the default/kubernetes service.
        relabel_configs:
          - action: keep
            source_labels: [__meta_kubernetes_namespace, __meta_kubernetes_service_name, __meta_kubernetes_endpoint_port_name]
            regex: default;kubernetes;https


      # Scrape config for service endpoints for services with a `prometheus.io/scrape`
      # annotation.
      #
      # The relabeling allows the actual service scrape endpoint to be configured
      # via the following annotations:
      #
      # * `prometheus.io/scrape`: Only scrape services that have a value of `true`
      # * `prometheus.io/scheme`: If the metrics endpoint is secured then you will need
      # to set this to `https` & most likely set the `tls_config` of the scrape config.
      # * `prometheus.io/path`: If the metrics path is not `/metrics` override this.
      # * `prometheus.io/port`: If the metrics are exposed on a different port to the
      # service then set this appropriately.
      - job_name: 'kubernetes-service-endpoints'
        kubernetes_sd_configs:
          - role: endpoints
        tls_config:
          ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
        bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token
        relabel_configs:
          - source_labels: [__meta_kubernetes_service_annotation_prometheus_io_scrape]
            action: keep
            regex: true
          - source_labels: [__meta_kubernetes_service_annotation_prometheus_io_scheme]
            action: replace
            target_label: __scheme__
            regex: (https?)
          - source_labels: [__meta_kubernetes_service_annotation_prometheus_io_path]
            action: replace
            target_label: __metrics_path__
            regex: (.+)
          - source_labels: [__address__, __meta_kubernetes_service_annotation_prometheus_io_port]
            action: replace
            target_label: __address__
            regex: ([^:]+)(?::\d+)?;(\d+)
            replacement: $1:$2
          - action: labelmap
            regex: __meta_kubernetes_service_label_(.+)
          - source_labels: [__meta_kubernetes_namespace]
            action: replace
            target_label: kubernetes_namespace
          - source_labels: [__meta_kubernetes_service_name]
            action: replace
            target_label: kubernetes_name


      # scrape config for pods with a `prometheus.io/scrape` annotation.
      #
      # The relabeling allows the actual pod scrape endpoint to be configured via the
      # following annotations:
      #
      # * `prometheus.io/scrape`: Only scrape pods that have a value of `true`
      # * `prometheus.io/path`: If the metrics path is not `/metrics` override this.
      # * `prometheus.io/port`: Scrape the pod on the indicated port instead of the default of `9102`.
      - job_name: 'kubernetes-pods'
        kubernetes_sd_configs:
          - role: pod
        tls_config:
          ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
        bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token
        relabel_configs:
          # only scrape if target pod has a `prometheus.io/scrape` annotation
          - action: keep
            source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_scrape]
            regex: true
          # update scrape path if `prometheus.io/port` specified
          - action: replace
            source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_path]
            target_label: __metrics_path__
            regex: (.+)
          # update scrape port if `prometheus.io/port` specified
          - action: replace
            source_labels: [__address__, __meta_kubernetes_pod_annotation_prometheus_io_port]
            regex: ([^:]+)(?::\d+)?;(\d+)
            replacement: $1:$2
            target_label: __address__
          # keep all pod labels as labels on time-series
          - action: labelmap
            regex: __meta_kubernetes_pod_label_(.+)
          # keep pod namespace as a label
          - action: replace
            source_labels: [__meta_kubernetes_namespace]
            target_label: kubernetes_namespace
          # keep pod name as a label
          - action: replace
            source_labels: [__meta_kubernetes_pod_name]
            target_label: kubernetes_pod_name
