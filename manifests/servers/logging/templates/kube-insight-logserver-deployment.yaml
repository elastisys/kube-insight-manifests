apiVersion: v1
kind: Service
metadata:
  name: kube-insight-logserver
  namespace: {{ .Values.namespace }}
  labels:
    kubernetes.io/cluster-service: "true"
    task: "kube-insight-logserver"
    kubernetes.io/name: "kube-insight-logserver"
  annotations:
    # allow prometheus to scrape metrics
    prometheus.io/scrape: "true"
    prometheus.io/path: "/metrics"
spec:
  ports:
  - port: 8080
    targetPort: 8080
  selector:
    k8s-app: kube-insight-logserver

---

apiVersion: apps/v1
kind: Deployment
metadata:
  name: kube-insight-logserver
  namespace: {{ .Values.namespace }}
  labels:
    k8s-app: "kube-insight-logserver"
    kubernetes.io/cluster-service: "true"
    version: "v{{ .Values.version }}"
spec:
  replicas: 1
  selector:
    matchLabels:
      k8s-app: kube-insight-logserver
      version: v{{ .Values.version }}
  template:
    metadata:
      labels:
        task: "kube-insight-logserver"
        k8s-app: "kube-insight-logserver"
        version: "v{{ .Values.version }}"
    spec:
      containers:
      - name: kube-insight-logserver
        image: {{ .Values.image }}:{{ .Values.version }}
        imagePullPolicy: {{ .Values.pullPolicy }}
        args:
          - --port=8080
          - --cassandra-keyspace={{ .Values.cassandraKeyspace }}
          - --cassandra-replication-strategy={{ .Values.cassandraReplicationStrategy }}
          - --cassandra-replication-factors={{ .Values.cassandraReplicationFactors }}
          - --cassandra-write-concurrency={{ .Values.cassandraWriteConcurrency }}
          - --log-level={{ .Values.logLevel }}
        {{- range .Values.cassandraHosts }}
          - {{ . }}
        {{- end }}
        readinessProbe:
          httpGet:
            path: /write
            port: 8080
            scheme: HTTP
          initialDelaySeconds: 10
          periodSeconds: 30
          timeoutSeconds: 5
        livenessProbe:
          httpGet:
            path: /write
            port: 8080
            scheme: HTTP
          initialDelaySeconds: 10
          periodSeconds: 30
          timeoutSeconds: 5
        resources:
          limits:
            cpu: {{ .Values.cpuLimitMilliCores }}m
            memory: {{ .Values.memLimitMB }}Mi
          requests:
            cpu: {{ .Values.cpuRequestMilliCores }}m
            memory: {{ .Values.memRequestMB }}Mi
      tolerations:
      # allow scheduling onto master
      - key: node-role.kubernetes.io/master
        effect: NoSchedule
